package com.raga.tools.billing.vertical;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.jdbc.JDBCClient;
import io.vertx.ext.sql.SQLConnection;
import io.vertx.ext.sql.SQLOptions;

/**
 * Created by ragha on 22-04-2018.
 */
public class AbstractDBVertical extends AbstractVerticle {

    private JDBCClient jdbcClient;

    public JDBCClient getJdbcClient() {
        if (jdbcClient == null) {
            String url = config().getString("db.url");
            String user = config().getString("db.user");
            String pass = config().getString("db.password");
            String driver = config().getString("db.driver");

            jdbcClient = JDBCClient.createShared(vertx, new JsonObject()
                    .put("url", url)
                    .put("user", user)
                    .put("password", pass)
                    .put("driver_class", driver)
                    .put("max_pool_size", 5));
        }
        return jdbcClient;
    }

    protected void executeUpdate(String sql, JsonArray params, Message message) {
        getJdbcClient().getConnection(handler -> {
            if (handler.failed()) {
                message.fail(500, "Couldn't get DB Connections");
            } else {
                try (SQLConnection connection = handler.result()) {
                    connection.setOptions(new SQLOptions().setAutoGeneratedKeys(true));

                    connection.updateWithParams(sql, params, bill -> {
                        if (bill.failed()) {
                            message.fail(500, "Failed while creating item. Please retry");
                        } else {
                            message.reply("Item created successfully");
                        }
                    });
                } catch (Exception e) {
                    message.fail(500, e.getMessage());
                }
            }
        });
    }
}
